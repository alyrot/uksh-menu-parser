// Code generated by MockGen. DO NOT EDIT.
// Source: parser.go

// Package mock_parser is a generated GoMock package.
package mock_parser

import (
	parser "github.com/alyrot/uksh-menu-parser/pkg/parser"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUKSHParserI is a mock of UKSHParserI interface
type MockUKSHParserI struct {
	ctrl     *gomock.Controller
	recorder *MockUKSHParserIMockRecorder
}

// MockUKSHParserIMockRecorder is the mock recorder for MockUKSHParserI
type MockUKSHParserIMockRecorder struct {
	mock *MockUKSHParserI
}

// NewMockUKSHParserI creates a new mock instance
func NewMockUKSHParserI(ctrl *gomock.Controller) *MockUKSHParserI {
	mock := &MockUKSHParserI{ctrl: ctrl}
	mock.recorder = &MockUKSHParserIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUKSHParserI) EXPECT() *MockUKSHParserIMockRecorder {
	return m.recorder
}

// PDFToDishes mocks base method
func (m *MockUKSHParserI) PDFToDishes(pdf []byte) ([]*parser.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PDFToDishes", pdf)
	ret0, _ := ret[0].([]*parser.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PDFToDishes indicates an expected call of PDFToDishes
func (mr *MockUKSHParserIMockRecorder) PDFToDishes(pdf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PDFToDishes", reflect.TypeOf((*MockUKSHParserI)(nil).PDFToDishes), pdf)
}
